# Toogle switch between keyboard layouts
setxkbmap -layout "us,de" -option "grp:lwin_switch"

BASE_DIR=$(dirname $BASH_SOURCE)

source ${BASE_DIR}/grafana-links.sh
source ${BASE_DIR}/ml-helpers.sh

function fastapi() {
    cat <<EOM
# pip install fastapi[all] loguru
from typing import Any

from fastapi import FastAPI, Request, APIRouter
from fastapi.responses import RedirectResponse
from starlette.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import logging
from loguru import logger


class Health(BaseModel):
    name: str
    api_version: str

class Result(BaseModel):
    result: float

class Settings:
    API_ENDPOINT_PREFIX: str = "/api/v1"

    #LOGGING_LEVEL: int = logging.INFO

    TITLE: str = "Project Title"


settings = Settings()

app = FastAPI(
        title=settings.TITLE,
        openapi_url=f"{settings.API_ENDPOINT_PREFIX}/openapi.json"
)

#app.add_middleware(
#        CORSMiddleware, allow_origins=["http://localhost:8001"], allow_methods=["*"], allow_headers=["*"]
#)

root_router = APIRouter()
api_router = APIRouter(prefix=settings.API_ENDPOINT_PREFIX)

@root_router.get("/")
async def index(request: Request) -> Any:
    return RedirectResponse(url="/docs")


@root_router.get("/health", response_model=Health, status_code=200)
async def health() -> dict:
    health = Health(name="API Demo", api_version="0.0.1")

    return health.model_dump()


# curl localhost:8000/square?num=2.718281
@api_router.get("/square", response_model=Result, status_code=200)
async def square(num: float) -> dict:
    logger.info("endpoint SQUARE was called")
    result = Result(result=num**2)

    return result.model_dump()

@api_router.post("/create", response_model=Result, status_code=201)
async def create(num: float) -> dict:
    logger.info("endpoint CREATE was called")
    result = Result(result=num**2)

    return result.model_dump()


app.include_router(root_router)
app.include_router(api_router)



if __name__ == "__main__":
    logger.debug("server starts")

    import uvicorn

    uvicorn.run(app, host="localhost", port=8001, log_level="debug")


EOM
}


function rust_macro_expand() {
    cat <<EOM
    # do not use: cargo rustc --profile=check -- -Zunstable-options --pretty=expanded
#  use either cargo:
    cargo rustc -- -Zunpretty=expanded 
# or use rustc directly
    rustc -Zunpretty=expanded test.rs
EOM
}

function docs.rs() {
    if [[ "$1" == "" ]]; then 
        echo "Give crate as argument, e.g. axum"
        return 1
    fi

    g --new-window https://docs.rs/$1/latest
}

function grep_files() {
    if [ "$1" == "" ]; then
        echo "error: no extension to search of was given as parameter"
        return
    fi
    if [ "$2" == "" ]; then
        echo "error: no pattern to search of was given as parameter"
        return
    fi
    find -type f -name "*.$1" -exec grep -Hn --color=auto "$2" {} \;
}

function start-trash-db() {
    export POSTGRES_USER="postgres"
    export POSTGRES_PASSWORD="password"
    export POSTGRES_HOST=localhost
    if [[ $1 == "" ]]; then 
        export POSTGRES_PORT=5432
    else 
        export POSTGRES_PORT=$1
    fi
    export PGUSER=${POSTGRES_USER}
    export PGPASSWORD=${POSTGRES_PASSWORD}
    export PGHOST=${POSTGRES_HOST}
    export PGPORT=${POSTGRES_PORT}
    export PGUSER=${POSTGRES_USER}
    export DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/postgres

    if docker ps | grep -q trash_db_${POSTGRES_PORT}; then 
        docker kill trash_db_${POSTGRES_PORT}
    fi

    if docker ps | grep -q trash_db; then 
        docker kill trash_db
    fi

    if [[ "$2" == "-d" ]]; then 
        docker run -d \
            -e POSTGRES_USER=${POSTGRES_USER} \
            -e POSTGRES_PASSWORD=${POSTGRES_PASSWORD} \
            -e POSTGRES_HOST=${POSTGRES_HOST} \
            -p ${POSTGRES_PORT}:5432 \
            --rm \
            --name trash_db_${POSTGRES_PORT} \
          postgres -N 64 -B 4096
    else
        gnome-terminal -- \
        docker run  \
            -e POSTGRES_USER=${POSTGRES_USER} \
            -e POSTGRES_PASSWORD=${POSTGRES_PASSWORD} \
            -e POSTGRES_HOST=${POSTGRES_HOST} \
            -p ${POSTGRES_PORT}:5432 \
            --rm \
            --name trash_db_${POSTGRES_PORT} \
          postgres -N 64 -B 4096
    fi

    while ! pg_isready; do 
        echo "database is not ready yet. Take a nap ..."
        export | grep PG
        sleep 1
    done

    if [[ "$2" == "-d" ]]; then 
        if [[ -d migrations ]]; then 
            echo "cd $PWD && cargo sqlx database setup; read" > /tmp/do-db-migration.sh
            bash -x /tmp/do-db-migration.sh
        fi
    else
        if [[ -d migrations ]]; then 
            echo "cd $PWD && cargo sqlx database setup; read" > /tmp/do-db-migration.sh
            gnome-terminal -- bash -x /tmp/do-db-migration.sh
        fi
    fi
}

function stop-all-trash-dbs() {
    while docker container ls | grep -q trash_db; do
        local dbs=$(docker container ls | grep trash_db | cut -d' ' -f1)
        docker kill ${dbs}
        sleep 0.2
    done
}

function plot-file() {
    if [[ "$1" == "" ]]; then 
        echo "Give name of file with values to plot as argument"
        return 1
    fi
    if [[ ! -f "$1" ]]; then 
        echo "$1 is not a common file"
        return 1
    fi

    if command -v octave > /dev/null; then 
        cat <<EOM | octave
data=load("$1");
plot(data);
print -dpng "$1.octave.png"
EOM

        echo "$1.octave.png was created"
    fi

    if command -v gnuplot > /dev/null; then 
        cat <<EOM | gnuplot
set term png
set output "$1.gnuplot.png"
plot "$1"
EOM

        echo "$1.gnuplot.png was created"
    fi

    if command -v python > /dev/null; then 
        if echo "import matplotlib" | python; then 

        cat <<EOM | python

import matplotlib.pyplot as plt

with open('$1', 'r') as file:
    data = file.readlines()

values = [float(line.strip()) for line in data]

plt.plot(values)
plt.savefig('$1.matplotlib.png')

EOM

        echo "$1.matplotlib.png was created"

        fi
    fi

    if command -v R > /dev/null; then 
        cat <<EOM | R --save 1>/dev/null 2>&1

data <- scan("$1")
plot(data, type = "l", main = "Your Plot Title", xlab = "X-axis Label", ylab = "Y-axis Label")

EOM

        mv Rplots.pdf "$1.R.pdf"
        echo "$1.R.pdf was created"
    fi
}

function docker-prune-all() {
    docker system prune --all --volumes --force
}

function R-plot-csv() {
    if [[ "$1" == "" ]]; then 
        echo "Give CSV file as parameter"
        exit 1
    fi

    if [[ ! -f "$1" ]]; then 
        echo "$i is not a file"
        exit 1
    fi

    x=$(head -n1 "$1" | cut -d, -f1)
    y=$(head -n1 "$1" | cut -d, -f2 | tr -d '\r' | tr -d '\n')

    cat <<EOM 

    dataset <- read.csv("$1")

    library(ggplot2)

    ggplot() + geom_point(aes(x = dataset\$$x, y = dataset\$$y))

EOM
}

function python-plot-csv() {
    if ! dpkg -l python3-pandas python3-matplotlib python3-numpy 1>/dev/null ; then 
        sudo apt install -y python3-pandas python3-matplotlib python3-numpy 
    fi

    plot-csv.py $1
}

function generate-gocode-from-openapi-spec() {
    if [[ "$1" == "" ]]; then 
        echo "no input file given"
        return 1
    fi
    if [[ ! -f $1 ]]; then 
        echo "$1 is not a file"
        return 1
    fi
    if ! jq . $1 > /dev/null; then
        echo "$1 contains invalid JSON"
        return 1
    fi

    npm install @openapitools/openapi-generator-cli -g
    openapi-generator-cli generate -i $1 -g go -o go_output
    echo "Go code was generated in directory go_output"
}

function gm() {
   lst=$(git status | grep "modified:" | sed "s#modified:##")
   echo "opening ${lst}"
   nvim -p ${lst}
}
function gmo() {
   lst=$(git status | grep "modified:" | sed "s#modified:##")
   echo "opening ${lst}"
   nvim -O ${lst}
}

alias d=docker
alias dc=docker-compose
alias p='python3'
alias gs='git status'
alias gitdiff='git difftool -x "nvim -d -O"'
alias gd=gitdiff
alias cw='cargo watch -qcx'

function cargo_build_for_target_bullseye() {
    docker run --rm --user "$(id -u)":"$(id -g)" -v "$PWD":/usr/src/myapp -w /usr/src/myapp rust:bullseye cargo build --release
}

function start_splash_docker() {
    gnome-terminal -- docker run -it -p 8050:8050 scrapinghub/splash
}

function cdr() {
    while [[ "${PWD}" != "/" && ! -d .git ]]; do cd ..; done
}

function dockerfiles() {
    nvim -O $(find -name Dockerfile -type f)
}

function base64_url_encode() {
	base64 | tr '+/' '-_' | tr -d '='
}

function show_dns_server() {
	nmcli | /usr/bin/grep -A3 "^DNS configuration" | grep "servers:" | sed "s#.*servers: ##"
}

function start_docker_nginx() {
	local f=/tmp/nginx-testing-index.html
	cat <<EOM > $f
<!DOCTYPE html>
<html>
<head>
<title>Adjusted nginx website!</title>
<style>
html { color-scheme: light dark; }
body { width: 35em; margin: 0 auto;
font-family: Tahoma, Verdana, Arial, sans-serif; }
</style>
</head>
<body>
<h1>Put here your testing HTML file</h1>
<p>
local development status file
</p>

</body>
</html>
EOM

    local cfg=/tmp/nginx-testing.conf
    cat <<EOM >$cfg
user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name  localhost;

        #access_log  /var/log/nginx/host.access.log  main;

        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }

}

EOM


	cat <<EOM 
Starting nginx docker container with $f as index.html and 
$cfg as /etc/nginx/nginx.conf
EOM

	docker container run \
		--publish 80:80 \
		--detach \
		--rm \
		--volume $f:/usr/share/nginx/html/index.html \
		--volume $cfg:/etc/nginx/nginx/conf \
	       	nginx

	echo "Use 'docker exec -it <container> nginx -s reload' for reloading configuration"
}

function o() {
	if [[ "$1" == "" ]]; then
		echo "Give name of file to search in PATH as parameter"
		return 1
	fi
	nvim $(which $1)
}

function create_shortcut() {
	target=$1
	shortcut=$2
	if [[ "${target}" == "" ]]; then
		echo "error: target empty"
		return 1
	fi
	if [[ "${shortcut}" == "" ]]; then
		echo "error: shortcut empty"
		return 1
	fi
	if [[ "$(which ${target})" != "" ]]; then
		ln -sf $(which ${target})      $HOME/bin/${shortcut} && echo "shortcut ${shortcut} created"
	else
		echo "${target} not found"
	fi
}

ONE_MB_IN_BYTES=1048576
ONE_GB_IN_BYTES=1073741824
ONE_TB_IN_BYTES=1099511627776

function promql_cpu_usage_in_percent() {
    cat <<EOM 

100 - (avg by (instance) (rate(node_cpu_seconds_total{job="node",mode="idle"}[1m])) * 100)

EOM
}

function sql_show_queries_from_one_minute_ago() {
    cat <<EOM

SELECT
	query
FROM pg_stat_activity
WHERE
	query != '<IDLE>'
	AND query NOT ILIKE '%pg_stat_activity%'
	AND query_start >= NOW() - INTERVAL '1' MINUTE
ORDER BY query_start desc;

EOM
}

if command -v minikube >/dev/null ; then 
    alias k='minikube kubectl --'
    alias m='minikube'
fi

