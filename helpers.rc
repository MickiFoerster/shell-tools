# Toogle switch between keyboard layouts
setxkbmap -layout "us,de" -option "grp:lwin_switch"

function R-plot-csv() {
    if [[ "$1" == "" ]]; then 
        echo "Give CSV file as parameter"
        exit 1
    fi

    if [[ ! -f "$1" ]]; then 
        echo "$i is not a file"
        exit 1
    fi

    x=$(head -n1 "$1" | cut -d, -f1)
    y=$(head -n1 "$1" | cut -d, -f2 | tr -d '\r' | tr -d '\n')

    cat <<EOM 

    dataset <- read.csv("$1")

    library(ggplot2)

    ggplot() + geom_point(aes(x = dataset\$$x, y = dataset\$$y))

    EOM
}

function python-plot-csv() {
    if ! dpkg -l python3-pandas python3-matplotlib python3-numpy 1>/dev/null ; then 
        sudo apt install -y python3-pandas python3-matplotlib python3-numpy 
    fi

    plot-csv.py $1
}

function generate-gocode-from-openapi-spec() {
    if [[ "$1" == "" ]]; then 
        echo "no input file given"
        return 1
    fi
    if [[ ! -f $1 ]]; then 
        echo "$1 is not a file"
        return 1
    fi
    if ! jq . $1 > /dev/null; then
        echo "$1 contains invalid JSON"
        return 1
    fi

    npm install @openapitools/openapi-generator-cli -g
    openapi-generator-cli generate -i $1 -g go -o go_output
    echo "Go code was generated in directory go_output"
}

function gm() {
   lst=$(git status | grep "modified:" | sed "s#modified:##")
   echo "opening ${lst}"
   nvim -p ${lst}
}
function gmo() {
   lst=$(git status | grep "modified:" | sed "s#modified:##")
   echo "opening ${lst}"
   nvim -O ${lst}
}

alias gs='git status'
alias gitdiff='git difftool -x "nvim -d -O"'
alias gd=gitdiff

function cargo_build_for_target_bullseye() {
    docker run --rm --user "$(id -u)":"$(id -g)" -v "$PWD":/usr/src/myapp -w /usr/src/myapp rust:bullseye cargo build --release
}

function start_splash_docker() {
    gnome-terminal -- docker run -it -p 8050:8050 scrapinghub/splash
}

function cdr() {
    while [[ "${PWD}" != "/" && ! -d .git ]]; do cd ..; done
}

function dockerfiles() {
    nvim -O $(find -name Dockerfile -type f)
}

function base64_url_encode() {
	base64 | tr '+/' '-_' | tr -d '='
}

function show_dns_server() {
	nmcli | /usr/bin/grep -A3 "^DNS configuration" | grep "servers:" | sed "s#.*servers: ##"
}

function start_docker_nginx() {
	local f=/tmp/nginx-testing-index.html
	cat <<EOM > $f
<!DOCTYPE html>
<html>
<head>
<title>Adjusted nginx website!</title>
<style>
html { color-scheme: light dark; }
body { width: 35em; margin: 0 auto;
font-family: Tahoma, Verdana, Arial, sans-serif; }
</style>
</head>
<body>
<h1>Put here your testing HTML file</h1>
<p>
local development status file
</p>

</body>
</html>
EOM

    local cfg=/tmp/nginx-testing.conf
    cat <<EOM >$cfg
user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name  localhost;

        #access_log  /var/log/nginx/host.access.log  main;

        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }

}

EOM


	cat <<EOM 
Starting nginx docker container with $f as index.html and 
$cfg as /etc/nginx/nginx.conf
EOM

	docker container run \
		--publish 80:80 \
		--detach \
		--rm \
		--volume $f:/usr/share/nginx/html/index.html \
		--volume $cfg:/etc/nginx/nginx/conf \
	       	nginx

	echo "Use 'docker exec -it <container> nginx -s reload' for reloading configuration"
}

function o() {
	if [[ "$1" == "" ]]; then
		echo "Give name of file to search in PATH as parameter"
		return 1
	fi
	nvim $(which $1)
}

function create_shortcut() {
	target=$1
	shortcut=$2
	if [[ "${target}" == "" ]]; then
		echo "error: target empty"
		return 1
	fi
	if [[ "${shortcut}" == "" ]]; then
		echo "error: shortcut empty"
		return 1
	fi
	if [[ "$(which ${target})" != "" ]]; then
		ln -sf $(which ${target})      $HOME/bin/${shortcut} && echo "shortcut ${shortcut} created"
	else
		echo "${target} not found"
	fi
}

ONE_MB_IN_BYTES=1048576
ONE_GB_IN_BYTES=1073741824
ONE_TB_IN_BYTES=1099511627776
